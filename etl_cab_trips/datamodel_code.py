# -*- coding: utf-8 -*-
"""datamodel_code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i9z9zPAWWs_C3r-99hmY6KvbeQKri5un

# Google Cloud Platform - ETL
In this project, I'll create an end to end Extract, Load, and Transform process using cab rides data in New York, 2023 dataset, whcih is  available [here](https://www.nyc.gov/site/tlc/about/tlc-trip-record-data.page).
To avoide losing the data and better consistency, I used the csv offline file(already downloaded, uber_data.csv) which you can find it in the dataset folder of this project.

Additionally, the data catalogue of this dataset is available [here](https://www.nyc.gov/assets/tlc/downloads/pdf/data_dictionary_trip_records_yellow.pdf)

## Designing the Data Model
The first step, is to define a data model to better manage our data. To do so, I created the following chart on Lucid Charts(an online application to create diagrams and data models):

![Uber DataModel.png](attachment:031a57a1-b557-4917-96f5-95a64bdaf4df.png)


You can also access this document using this [link](https://lucid.app/lucidchart/620f4138-f22f-40c8-b739-7e93dd6004aa/edit?viewport_loc=-418%2C75%2C1835%2C808%2C0_0&invitationId=inv_bc41f21d-5619-4fe5-89cb-62d2d93be0ad)
"""

import pandas as pd

df = pd.read_csv("uber_data.csv")

df.head(10)

#checking data types
df.dtypes

df.shape

#changing datatime columns into datatime type
df["tpep_pickup_datetime"] = pd.to_datetime(df["tpep_pickup_datetime"])
df["tpep_dropoff_datetime"] = pd.to_datetime(df["tpep_dropoff_datetime"])

df.dtypes

#dropping duplicate columns
df = df.drop_duplicates().reset_index(drop=True)
df['trip_id'] = df.index

df.head()

"""## Applying the data model:
In the following steps, I'll create the tables one by one(as pandas dataframes).

The first table, is datetime_dim table, which is a dimension table:

![image.png](attachment:ba620f5a-acff-402b-8331-bbddc4bceb7b.png)
"""

#extracting and transforming the pickup time data
datetime_dim = df[['tpep_pickup_datetime','tpep_dropoff_datetime']].reset_index(drop=True)
datetime_dim['tpep_pickup_datetime'] = datetime_dim['tpep_pickup_datetime']
datetime_dim['pick_hour'] = datetime_dim['tpep_pickup_datetime'].dt.hour
datetime_dim['pick_day'] = datetime_dim['tpep_pickup_datetime'].dt.day
datetime_dim['pick_month'] = datetime_dim['tpep_pickup_datetime'].dt.month
datetime_dim['pick_year'] = datetime_dim['tpep_pickup_datetime'].dt.year
datetime_dim['pick_weekday'] = datetime_dim['tpep_pickup_datetime'].dt.weekday


#extracting and transforming the drop time data
datetime_dim['tpep_dropoff_datetime'] = datetime_dim['tpep_dropoff_datetime']
datetime_dim['drop_hour'] = datetime_dim['tpep_dropoff_datetime'].dt.hour
datetime_dim['drop_day'] = datetime_dim['tpep_dropoff_datetime'].dt.day
datetime_dim['drop_month'] = datetime_dim['tpep_dropoff_datetime'].dt.month
datetime_dim['drop_year'] = datetime_dim['tpep_dropoff_datetime'].dt.year
datetime_dim['drop_weekday'] = datetime_dim['tpep_dropoff_datetime'].dt.weekday

datetime_dim.head()

#assigning the index of dataframe to a column:
datetime_dim['datetime_id'] = datetime_dim.index

#reordering the columns to use as our table:
datetime_dim = datetime_dim[['datetime_id', 'tpep_pickup_datetime', 'pick_hour', 'pick_day', 'pick_month', 'pick_year', 'pick_weekday',
                             'tpep_dropoff_datetime', 'drop_hour', 'drop_day', 'drop_month', 'drop_year', 'drop_weekday']]
datetime_dim.head()

"""In the next step, I'll create the passenger_count dataframe. This dataframe will be used as our passenger_count dimension table in our data model:
![image.png](attachment:67a52ff6-916c-42af-98f8-1332ef6e593e.png)
"""

passenger_count_dim = df[['passenger_count']].reset_index(drop=True)
passenger_count_dim['passenger_count_id'] = passenger_count_dim.index #creating the id column to be used as the primary key of the table
passenger_count_dim = passenger_count_dim[['passenger_count_id','passenger_count']] #reordering the columns

passenger_count_dim.head()

"""creating the trip distance dataframe:

![image.png](attachment:14951df2-7306-496a-a87c-72e8d319ef5f.png)
"""

trip_distance_dim = df[['trip_distance']].reset_index(drop=True)
trip_distance_dim['trip_distance_id'] = trip_distance_dim.index #adjusting to be used as the primary key in the future table
trip_distance_dim = trip_distance_dim[['trip_distance_id','trip_distance']] #reordering the columns

trip_distance_dim.head()

"""Creating the rate code dataframe:

![image.png](attachment:ff50b748-2067-40bf-ab79-2825a7dbd5d9.png)

when creating this table, I add an extra column defining the rate code id's used in our dataframe, using the data catalouge provided [here](https://www.nyc.gov/assets/tlc/downloads/pdf/data_dictionary_trip_records_yellow.pdf)
"""

rate_code_type = {
    1:"Standard rate",
    2:"JFK",
    3:"Newark",
    4:"Nassau or Westchester",
    5:"Negotiated fare",
    6:"Group ride"
}

rate_code_dim = df[['RatecodeID']].reset_index(drop=True)
rate_code_dim['rate_code_id'] = rate_code_dim.index
rate_code_dim['rate_code_name'] = rate_code_dim['RatecodeID'].map(rate_code_type)
rate_code_dim = rate_code_dim[['rate_code_id','RatecodeID','rate_code_name']]

rate_code_dim.head()

"""creating the dropoff and pickup location dataframes:

![image.png](attachment:715f4ce9-593e-45c5-9797-eb72095ec1a1.png)
"""

pickup_location_dim = df[['pickup_longitude', 'pickup_latitude']].reset_index(drop=True) #slicing the data
pickup_location_dim['pickup_location_id'] = pickup_location_dim.index #setting the index as the id column(primary key in the future table)
pickup_location_dim = pickup_location_dim[['pickup_location_id','pickup_latitude','pickup_longitude']] #reirdering the columns based on the defined table
print(pickup_location_dim.head())

dropoff_location_dim = df[['dropoff_longitude', 'dropoff_latitude']].reset_index(drop=True)
dropoff_location_dim['dropoff_location_id'] = dropoff_location_dim.index
dropoff_location_dim = dropoff_location_dim[['dropoff_location_id','dropoff_latitude','dropoff_longitude']]
print(dropoff_location_dim.head())

"""creating the payment type dataframe:

![image.png](attachment:e858a1d1-a8e5-4486-bdaa-29dca5e7c465.png)
"""

# creating a dictionary to define the payment type ids:
payment_type_name = {
    1:"Credit card",
    2:"Cash",
    3:"No charge",
    4:"Dispute",
    5:"Unknown",
    6:"Voided trip"
}
payment_type_dim = df[['payment_type']].reset_index(drop=True) #slicning
payment_type_dim['payment_type_id'] = payment_type_dim.index # indexing
payment_type_dim['payment_type_name'] = payment_type_dim['payment_type'].map(payment_type_name) #adding new data
payment_type_dim = payment_type_dim[['payment_type_id','payment_type','payment_type_name']] #reordering based on our columns
payment_type_dim.head()

"""creating the fact table:

* the fact table is the biggest table in our data model, showing the transactional data. It has one primary key and multiple foreign keys in our designed data model:

![image.png](attachment:e086442e-13e4-451d-9dcf-23870ff32735.png)
"""

# merging the data to create the fact table(and reordering the columns to be aligned with our designed structure at the same time)
fact_table = df.merge(passenger_count_dim, left_on='trip_id', right_on='passenger_count_id') \
             .merge(trip_distance_dim, left_on='trip_id', right_on='trip_distance_id') \
             .merge(rate_code_dim, left_on='trip_id', right_on='rate_code_id') \
             .merge(pickup_location_dim, left_on='trip_id', right_on='pickup_location_id') \
             .merge(dropoff_location_dim, left_on='trip_id', right_on='dropoff_location_id')\
             .merge(datetime_dim, left_on='trip_id', right_on='datetime_id') \
             .merge(payment_type_dim, left_on='trip_id', right_on='payment_type_id') \
             [['trip_id','VendorID', 'datetime_id', 'passenger_count_id',
               'trip_distance_id', 'rate_code_id', 'store_and_fwd_flag', 'pickup_location_id', 'dropoff_location_id',
               'payment_type_id', 'fare_amount', 'extra', 'mta_tax', 'tip_amount', 'tolls_amount',
               'improvement_surcharge', 'total_amount']]

fact_table.head()

